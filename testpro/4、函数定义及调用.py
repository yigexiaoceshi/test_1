# -*- coding:utf-8 -*-
"""
函数：代码块已def关键词开头，加函数名称和圆括号()
1、冒号起始
2、注意缩进
3、圆括号中定义参数
4、函数说明 - 文档字符串
5、以return[表达式]结束函数
6、选择性的返回一个值给调用方
7、不带表达式的return或者不写return函数，相当于给调用方返回None
"""


def func1(a, b, c):  # 参数a高亮，因为在函数中有使用到，bc置灰表名在函数中未使用到
    """
    :param a: 参数a的注释，如"参数a是用来打印的"
    :param b: 参数b的注释
    :param c: 参数c的注释
    :return:
    """
    # print("这是一个函数a",a)
    # print("这是一个函数b",b)
    # print("这是一个函数c",c)
    return (a + b)  # 只能有一个返回值
    # return None 和 return 甚至不需要return返回值都是None


"""
函数的调用：
1、调用形式
2、调用时的传参
3、位置参数（多个参数时按照顺序进行匹配）
"""
print(func1(1, 2, 3))

"""
默认参数
1、在定义函数的时候使用k=v的形式
2、调用函数时，如果没有传递参数，则会使用默认参数
"""


def func2(a=2):
    print("参数a的默认参数值为", a)


func2()
func2(3)
func2(a=3)

"""
关键字参数：
1、调用的时候，使用k=v的方式进行传参
2、在函数调用或定义中，关键字参数必须跟随在位置参数的后面
"""


def func3(a, b, c, d):
    print("参数a的参数值为", a)
    print("参数b的参数值为", b)
    print("参数c的参数值为", c)
    print("参数d的参数值为", d)


func3(b=2, c=5, a=100, d=10000)  # 位置参数不需要按照顺序传参
func3(10, b=2, c=5, d=10000)  # 都有时，位置参数一定要放前面
# func3(a=1,10,c=3,d=4)  #这种写法不对，无法识别数字10对应哪个参数

"""
特殊参数：仅限关键字参数，在【仅限关键字】形参前放置一个*
"""


def func3(a, b, c, *, d):  # 意思是d参数需要关键字参数传参
    print("参数a的参数值为", a)
    print("参数b的参数值为", b)
    print("参数c的参数值为", c)
    print("参数d的参数值为", d)


# func3(2,5,100,10000)  #这样就会报错，参数d要使用关键字参数传参，即d=10000
func3(b=2, c=5, a=100, d=10000)  # 位置参数不需要按照顺序传参，如果d不是关键关键字参数传参就会报错

"""
lambda表达式：
1、可以使用lambda关键字创建一个小的匿名函数
2、主题仅仅是个表达式，而不是一个代码块。能在lambda表达式中封装有限的逻辑进去
"""
func4 = lambda x: x * 2
print(func4(3))


# 和下面的写法相同：
def func5(x):
    return x * 2


print(func5(3))

func6 = lambda x, y: x + y
print(func6(2, 3))
